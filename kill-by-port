#!/usr/bin/env python2.7
'''
This script kills all processes that are listening to a specified port.

Need psutil version 2.2.1
Installation on Windows: python -m pip install psutil==2.2.1

Author: Jon Deaton
Date: November 3, 2017

Motivation:
For some reason on Windows when you terminate the 'ng serve' command in the shell, it still leaves processes listening to
port 4200. This script is to fix this problem by killing all of those processes.
'''

import os, sys
import argparse, logging
import platform
from psutil import process_iter
from signal import SIGTERM

__version__ = 1.0
__author__ = "Jonathan Deaton (jdeaton@stanford.edu)"
__license__ = "No license"

logging.basicConfig(format='[%(levelname)s][%(funcName)s] - %(message)s')
logger = logging.getLogger(__name__)

def main():
    parser = argparse.ArgumentParser(description= "Kills processes listening to a specified port")

    options_group = parser.add_argument_group("Options")
    parser.add_argument("-f", "--force", action="store_true", help="do not confirm")
    parser.add_argument("-p", "--ports", nargs='+', type=int, required=False, help="specify the ports")
    parser.add_argument("-win", "--windows", action="store_true", help="only run on widnows")

    console_options_group = parser.add_argument_group("Console Options")
    console_options_group.add_argument('-v', '--verbose', action='store_true', help='verbose output')
    console_options_group.add_argument('--debug', action='store_true', help='debug console')

    args = parser.parse_args()

    if args.debug: logger.setLevel(logging.DEBUG)
    elif args.verbose: logger.setLevel(logging.INFO)
    else: logger.setLevel(logging.WARNING)

    # If the user specified an operating system, then exit if not on that system
    if args.windows and not running_on_windows():
        logger.warning("Not running on windows. Exiting.")
        return

    logger.info("Killing processes listening on ports: %s" % args.ports)
    killem(args.ports, force=args.force)

def killem(ports, force=False):
    for process in process_iter():
        logger.debug("Checking: %s" % process)
        for port in ports:
            if is_listening_on_port(process, port):
                if force or confirm_action("Kill: %s (port: %d)?" % (process, port)):
                    kill_process(process)
                else:
                    logger.info("Not killing: %s" % process)

def is_listening_on_port(process, port):
    try:
        for connection in process.get_connections(kind='inet'):
            logger.debug("Connections: %s"  % str(connection))
            if connection.laddr[1] == port: return True
    except: pass
    return False

def kill_process(process):
    try:
        logger.info("Killing: %s" % process)
        process.send_signal(SIGTERM)
    except:
        logger.debug("Error killing: %s" % process)

def running_on_windows():
    return sys.platform.lower() in ["win", "win32", "win64", "windows"]

def confirm_action(prompt, default="yes"):
    yes = set(["yes", "y", "ye"])
    no = set(["no", "n"])
    exit_responses = set(["exit", "quit", "stop"])

    if default is True or default in yes:
        yes.add("")
        options_text = "Y/n"
    elif default is False or default in no:
        no.add("")
        options_text = "y/N"
    elif default is None: options_text = "y/n"
    else: raise ValueError
    while True:
        sys.stdout.write("%s [%s] " % (prompt, options_text))
        sys.stdout.flush()
        response = raw_input().lower()
        if response in yes: return True
        elif response in no: return False
        elif response in exit_responses: exit()
        else: print "Answer with yes/no/exit."

if __name__ == "__main__":
    main()
